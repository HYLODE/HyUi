# ./.env.example
#   --------------------------------------------------------
#   DO **NOT** PLACE UNDER VERSION CONTROL
#   --------------------------------------------------------

# Environment variables go here, and can be read in by Python using `os.getenv`:
#
#   --------------------------------------------------------
#   import os
#
#   # Example variable
#   EXAMPLE_VARIABLE = os.getenv("EXAMPLE_VARIABLE")
#   --------------------------------------------------------
#
# To ensure the `sed` command below works correctly, make sure all file paths in environment variables are absolute
# (recommended), or are relative paths using other environment variables (works for Python users only). Environment
# variable names are expected to contain letters, numbers or underscores only.
#
# DO NOT STORE SECRETS HERE - this file is version-controlled! You should store secrets in a `.secrets` file, which is
# not version-controlled - this can then be sourced here, using `source_env ".secrets"`.

# Extract the variables to `.env` if required. Note `.env` is NOT version-controlled, so `.secrets` will not be
# committed

# direnv used to expect a .envrc file but will now work with .env
# see https://stackoverflow.com/a/71635629/992999

# Add environment variables for the `data` directories
# DIR_DATA=$(pwd)/src/data

# Add environment variables for the `docs` directory
DIR_DOCS=$(pwd)/docs

# Add environment variables for the `notebooks` directory
DIR_NOTEBOOKS=$(pwd)/notebooks

# Add environment variables for the `outputs` directory
DIR_OUTPUTS=$(pwd)/src/outputs

# Add environment variables for the `src` directories
DIR_SRC=$(pwd)/src
DIR_SRC_UTILS=$(pwd)/src/utils
DIR_SRC_CONFIG=$(pwd)/src/config
DIR_SRC_API=$(pwd)/src/api
DIR_SRC_APP=$(pwd)/src/app
DIR_SRC_MOCK=$(pwd)/src/mock

# Add environment variables for the `tests` directory
DIR_TESTS=$(pwd)/tests


# ===================================================================== #
# GOV.UK cookiecutter above / local edits and notes below
# ===================================================================== #
# HYLODE (copied from HySus/hylode/.env.sample)
# ===================================================================== #

# HYLODE data store
HYLODE_DB_HOST=postgres
HYLODE_DB_PORT=5432
HYLODE_DB_NAME=hylode
HYLODE_DB_USER=hylode
HYLODE_DB_PASSWORD=

# Remote data stores
USE_EMAP_DB=true
EMAP_DB_USER=
EMAP_DB_PASSWORD=
EMAP_DB_HOST=
EMAP_DB_PORT=
EMAP_DB_NAME=
USE_CABOODLE_DB=true
CABOODLE_DB_USER=
CABOODLE_DB_PASSWORD=
CABOODLE_DB_HOST=
CABOODLE_DB_PORT=
CABOODLE_DB_NAME=

# Run all containers with HYLODE_UID & GID=0 as per OpenShift recommendations
HYLODE_UID=9999

# Used to download the Telerik Blazor NuGet packages in HyUI.
TELERIK_USERNAME=
TELERIK_PASSWORD=

# Remote logging service
ROLLBAR_TOKEN=

# Exposed ports, change according to deployment env. Port mappings that
# end with _WEB_PORT will be displayed on the HyUI services web page.
HYUI_PORTAL_PORT=9999
HYCOMMAND_WEB_PORT=9999
HYCOMMAND_QUEUE_WEB_PORT=9999
HYVIZ_REPO_PORT=9999
HYVIZ_UI_WEB_PORT=9999
HYFLOW_API_WEB_PORT=9999
HYGEAR_API_WEB_PORT=9999
HYCASTLE_API_WEB_PORT=9999
HYMIND_API_WEB_PORT=9999
HYMIND_REPO_WEB_PORT=9999
HYMIND_LAB_WEB_PORT=9999
HYMIND_FIELD_SSH_PORT=9999
HYUI_DOTNET_DEMAND_WEB_PORT=9999
HYUI_DEMAND_WEB_PORT=9999
POSTGRES_PORT=9999
REDIS_PORT=9999
# Range of ports to expose Dash apps running in HyMind Field
HYMIND_FIELD_APP_PORT_RANGE=9990-9999
# Production model API ports
ICU_EPISODE_SLICES_MODEL_PORT=9999
ICU_WARD_AGGREGATE_MODEL_PORT=9999
ED_ADMISSIONS_MODEL_PORT=9999

# ===================================================================== #
# HYUI
# ===================================================================== #

# Run all containers with HYUI_UID & GID=0 as per OpenShift recommendations
HYUI=9998

# SET THE ENVIRONMENT
ENV=dev

# Add the working directory to `PYTHONPATH`; allows Jupyter notebooks in the `notebooks` folder to import `src`
# PYTHONPATH="${PYTHONPATH}:${PWD}"
# PYTHON modules are assumed to run from ./src
PYTHONPATH="${PYTHONPATH}:src"
PYTHONDONTWRITEBYTECODE=1
PYTHONUNBUFFERED=1

# Set GITHUB_ACTIONS to True via the ./.github/workflows/main.yml config
# then use pytest.skipif to block tests that will necessarily fail on github
# e.g. where .secrets are involved
GITHUB_ACTIONS=False
NO_SECRETS_FILE=False
