# src/mock/mock.py
import pandas as pd
from pathlib import Path
from sqlmodel import Session, SQLModel, create_engine
from sqlmodel.pool import StaticPool

# this next step forces the metadata to generate
from config.settings import settings
import api.models

SYNTH_HDF_DATA_PATH = Path(__file__).parent / "mock.h5"


def make_mock_df(f: Path = SYNTH_HDF_DATA_PATH) -> pd.DataFrame:
    """
    Makes a dataframe from the HDF file generated by the code in ./synth
    """
    try:
        assert f.is_file()
    except AssertionError as e:
        print(e)
        print(f"!!! Synthetic data not found at {f}")
        print("!!! Follow the instructions in ./synth/readme.md to generate")
        print("!!! Then check that you've manually copied the HDF file")
        print("!!! from ./synth/portal/ to ./src/mock/")
    df = pd.read_hdf(f)
    return df


def load_mock_db(engine, df: pd.DataFrame):
    """
    Given a SQLalchemy connection then load mock data
    """
    try:
        # double check that you're in the dev environment else 
        # df.to_sql is overwrites
        assert settings.ENV == 'dev'
        assert 'sqlite' in settings.DB_URL
        n_new_rows = df.to_sql(name='mock', con=engine, if_exists=replace)
    except AssertionError as e:
        print(e)
        print("!!! Don't insert data unless in dev using sqlite")
    return n_new_rows


if __name__ == "__main__":
    make_mock_df(SYNTH_HDF_DATA_PATH)
    load_mock_db()
