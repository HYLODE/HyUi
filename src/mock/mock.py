# src/mock/mock.py
"""
Generates sqlite database with a table holding modelled as per
api.models.Results and then loads the data from the local HDF file
"""
import pandas as pd
import sqlalchemy as sa
from pathlib import Path
from sqlmodel import Session, SQLModel, create_engine
from sqlmodel.pool import StaticPool

# this next step forces the metadata to generate
from api.models import Results

SYNTH_HDF_FILE = Path(__file__).parent / "mock.h5"
# you can use this function in testing but swap in an in memory version
SYNTH_SQLITE_FILE = Path(__file__).parent / "mock.db"
SYNTH_SQLITE_URL = f"sqlite:///{SYNTH_SQLITE_FILE}"
SYNTH_SQLITE_MEM = "sqlite://"
ECHO = False


def make_engine(path=SYNTH_SQLITE_URL, **kwargs):
    engine = create_engine(path, **kwargs)
    return engine


def make_mock_df(f: Path = SYNTH_HDF_FILE) -> pd.DataFrame:
    """
    Makes a dataframe from the HDF file generated by the code in ./synth
    """
    try:
        assert f.is_file()
    except AssertionError as e:
        print(e)
        print(f"!!! Synthetic data not found at {f}")
        print("!!! Follow the instructions in ./synth/readme.md to generate")
        print("!!! Then check that you've manually copied the HDF file")
        print("!!! from ./synth/portal/ to ./src/mock/")
        raise AssertionError(e)

    df = pd.read_hdf(f)
    return df


def create_mock_table(engine, model: SQLModel = Results, drop=False):
    # metadata is defined when you run the import statement above
    table = model.__table__
    if drop:
        SQLModel.metadata.drop_all(engine, tables=[table])
    # force it fail if drop not issued
    try:
        SQLModel.metadata.create_all(engine, tables=[table], checkfirst=False)
    except sa.exc.OperationalError as e:
        print(e)
        print("==============================================================")
        print("??? Try using drop=True to force the table to be deleted first")


def insert_into_mock_table(engine, df: pd.DataFrame, model: SQLModel):
    rows = df.to_dict(orient="records")
    with Session(engine) as session:
        for row in rows:
            session.add(model(**row))
        session.commit()
    return 0


def make_mock_db_in_memory():
    engine = make_engine(
        path=SYNTH_SQLITE_MEM,
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
    )
    df = make_mock_df(SYNTH_HDF_FILE)
    create_mock_table(engine, Results)
    insert_into_mock_table(engine, df, Results)
    return engine


if __name__ == "__main__":
    df = make_mock_df(SYNTH_HDF_FILE)
    engine = make_engine(echo=True)
    create_mock_table(engine, Results, drop=True)
    insert_into_mock_table(engine, df, Results)
