---
title: HyUI documentation
---

User interface for the HYLODE project Much of the project structure is based
on the[`govcookiecutter` template project][govcookiecutter] but is adapted
for the development of Plotly Dash apps within a hospital environment. A
template application would be split into a frontend and a backend with
communication between the two via HTTP, and the project orchestrated by
docker-compose.

This file (`./readme.md`) is at the root of the project, but the application
code including the backend is in `./src/api`, and the application itself is
kept in `./src/apps`. An annotated figure of the directory structure is shown
below.

## Deployment

### Quick start

From the commandline of the GAE

```sh
git clone https://github.com/HYLODE/HyUi.git
cd HyUi
cp .env.example .env
# Now hand edit the .env file with usernames/passwords
# Set ENV=prod (rather than dev)
pytest # OPTIONAL
docker-compose up -d --build && docker-composes logs -f
```

Go to [http://my-host-name:8094/docs](http://my-host-name:8094/docs) for the API. For example for this might be [http://172.16.149.202:8094]().

Go to [http://my-host-name:8095](http://my-host-name:8095) for the dashboard landing page. For example for this might be [http://172.16.149.202:8095]().

Refer to [Deployment](developer/deployment.qmd) for more details.

### Development

Refer to [Dev Setup](developer/setup.qmd) for details on setting up development environments.

### Development (Hospital)

There are two tasks that _must_ happen within the hospital environment: (1) preparing realistic mock data (2) deployment. The installation steps differ because here we do not have **sudo** (root) access (admin privileges). This means work must be performed using a combination of the default command line tools and docker.


**YOU MUST NOW PREPARE YOUR DATA MODEL IN `./src/api/models.py`**
This is a quality control step that ensures the data you handle is of the correct type.
let's generalise the naming so that query is matched to results which has rows
and results is a pydantic / sqlmodel class
by hand, specify as per ... https://sqlmodel.tiangolo.com/tutorial/create-db-and-table/


A simple Pandas dataframe with two string columns and a timestamp.

```python
>>> df.types
firstname                          object
lastname                           object
admission_datetime                 datetime64[ns]
```

The equivalent SQLModel. Note that `firstname` is optional but that `lastname` and `admission_datetime` are not.

```python
from sqlmodel import SQLModel
from datetime import datetime

class ResultsBase(SQLModel):
    """
    Generic results class to hold data returned from
    the SQL query or the API
    """
    firstname: Optional[str]
    lastname: str
    admission_datetime: datetime

```

You can also use the [`@validator`](https://pydantic-docs.helpmanual.io/usage/validators/) decorator function to add additional validation.

### Prod deployment

Set the environment variable to *prod*, then run *docker-compose*.

```sh
export ENV=prod
pytest
docker-compose up -d --build && docker-compose logs -f
```

You will need create a local `./.secrets` file with database credentials so preferably set the *ENV* to `prod` there.

### Orchestrating front and back end

**IMPORTANT**: ensure you have created a ./.secrets file with at least the same info as the ./.secrets.example version

```bash
docker-compose down
docker-compose up -d --build && docker-compose logs -f
```

## Project structure

```
.
|
|-- readme.md           // this file and the project root
|-- Makefile            // standard project commands to be run from the shell
|-- config files        // e.g. requirements.txt, .gitignore
|-- .secrets            // e.g. .secrets etc excluded from version control
|-- secrets.example     // an example version of .secrets above
|-- docker-compose.yml  // orchestrate front/backend
|-- src
    |-- frontend
        |-- Dockerfile
        |-- dash_app.py
    |-- backend
        |-- Dockerfile
        |-- query.sql   // SQL used to drive the backend API
|-- synth               // Synthetic data generation for testing
    |-- work
|-- tests
|-- docs                // this Quarto website
|-- data
|-- outputs
|-- notebooks           // jupyter notebooks etc
|-- try                 // ideas playground


```

## Contributing

[If you want to help us build, and improve `hyui`, view our
contributing guidelines][contributing].

## Acknowledgements

[This project structure is based on the `govcookiecutter` template
project][govcookiecutter].

[contributing]: ./docs/contributor_guide/CONTRIBUTING.qmd
[govcookiecutter]: https://github.com/best-practice-and-impact/govcookiecutter
[docs-loading-environment-variables]: ./docs/developer/environment_variables.qmd
[docs-loading-environment-variables-secrets]: ./docs/developer/environment_variables.md#storing-secrets-and-credentials
