---
title: Setting up development for HyUi
---

## Architecture

The root directory contains all the libraries that are used to power the HyUi dashboards.

- `api`: This is a FastAPI app that does all the data wrangling and accessing of external sources such as to databases and web services. For each route there should be an equivalent mock route that allows this app to serve mock data when run in development. For example, if there is a `/census/` endpoint then there should be a corresponding `/mock/census` endpoint that only serves mock data.
- `web`: This is contains the Plotly Dash web server code. It should *only* communicate with the `api` service. This allows the `api` service to provide mock data seamlessly when developing without needing to spin up other services to help development.
- `models`: This contains all the Pydantic models that are used to share data between the `api` and `web`.
- `initialise`: This sets-up the BaseRow instance that is used for configuration by the user.

### Architecture Ideals
- `web` should only communicate with `api` for data. This allows us to entirely mock data for `web` when developing.
- Communication between `web` and `api` should only be done in a defined way using models described in `models`. `models` is the only shared code between `api` and `web`.
- Pages in `web/src/web/pages` should be independent of each other so there is minimal/no sharing between two sets of pages. Common code can be put in a separate module or package in `web`.


## Development

Clone the HyUi repository to your local machine.

```sh
git clone https://github.com/HYLODE/HyUi.git
```

### Install Requirements

- Install [https://github.com/pyenv/pyenv](pyenv)
- Install [https://github.com/pyenv/pyenv-virtualenv](pyenv-virtualenv)

### Create Required Virtual Environments

```sh
pyenv virtualenv 3.11.0 hyui-web
pyenv virtualenv 3.11.0 hyui-api
```

### Activate Virtual Environment

In one shell:

```sh
pyenv activate hyui-web
```

In another shell:
```sh
pyenv activate hyui-api
```

These will be the Python virtual environments that contains all the dependencies for the Dash web app and the API backend.

### Install the Website app requirements

In the `hyui-web` terminal in the root directory:

```sh
pip install -e "models[test]"
pip install -e "web[test]"
```

### Install the API requirements
In the `hyui-api` terminal in the root directory:

```sh
pip install -e "models[test]"
pip install -e "api[test]"
```

### Install The pre-commit Hooks

In your shell (`hyui-api` or `hyui-web`) run the following command:

```sh
pre-commit install
```

### Configuring Environment Variables

An example environment variable file can be found at `.env.example`. The environment variables for each app are documented in the Pydantic Settings classes in `web/src/web/config.py` and `api/src/api/config.py`. An important one for development and production is the `WEB_API_URL` variable. This should be set to the host and port of your `api` server so most likely something like `http://api:8000` for running in Docker or `http://localhost:[port]/mock` for development. Note that in development a `/mock` path has been added. This allows the Dash web app to use all the mock endpoints instead of the live endpoints.

The environment variables are _required_, and the application will fail if any of these are missing when it attempts to run.

### Running The Servers Manually When Developing

The web server when in the `hyui-web` shell:

```sh
env $(grep -v '^#' .env | xargs) python -m web.main
```

The API server when in the `hyui-api` shell:

```sh
env $(grep -v '^#' .env | xargs) uvicorn api.main:app --reload --port 8092
```

Ensure you replace `.env` with the correct path to your development `.env` file. The command `env $(grep -v '^#' .env | xargs)` loads the contents of the `.env` into the environment just for the current execution. The `grep -v '^#'` part excludes lines beginning with a `#` in the env file.


### Tips And Tricks

#### Debugging From Within The NHS Network

Sometimes it can be difficult to debug your staging services from within the NHS's firewall on live data. You can log into the `hyui-web` or `hyui-api` services from a terminal within the `HyUi` directory using the following:

```sh
docker compose --project-name [project name] exec hyui-web bash
```

```sh
docker compose --project-name [project name] exec hyui-api bash
```

You can then change the code using vim or open a python console and debug from there. It may be useful to edit the `docker/api/Dockerfile` or `docker/web/Dockerfile` and add a `--reload` flag to the `ENTRYPOINT` so that code changes from within the container are reloaded automatically. `ENTRYPOINT ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--reload"]` instead of `ENTRYPOINT ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--reload"]`.

If you prefer not to use vim then Visual Studio can SSH into the running containers somehow.


#### Debugging On Your Local Machine

If you are using PyCharm or another IDE then ensure that the environment variables in `.env` are loaded. PyCharm has a plugin that can load these when unit testing with `pytest` or running the main application.


## Initialisation

Currently only Baserow needs to be initialised by creating an admin user and setting up the tables required for the rest of the app to function correct. The `initialise` python package contains the code that does all this.

```sh
pyenv virtualenv 3.11.0 hyui-initialise
pyenv activate hyui-initialise

pip install -e "initialise"

python -m initialise.main --operation baserow
```

You can do this on your local machine but you need to install (with docker).
See the [docs](https://baserow.io/docs/installation%2Finstall-with-docker).
If you do this then don't forget to adjust the `BASEROW_PUBLIC_URL` to point to your local dev version (e.g. `http://localhost:80`)
