# Developing For HyUi

## Overview
This is an experimental workflow designed to ultimately align the way packages are installed on development machines and in production. It is ultimately intended to replace Conda.

## Architecture

The root directory contains all the libraries that are used to power the HyUi dashboards.

- `api`: This is a FastAPI app that does all the data wrangling and accessing of external sources such as to databases and web services. For each route there should be an equivalent mock route that allows this app to serve mock data when run in development. For example, if there is a `/census/` endpoint then there should be a corresponding `/mock/census` endpoint that only serves mock data.
- `web`: This is contains the Plotly Dash web server code. It should *only* communicate with the `api` service. This allows the `api` service to provide mock data seamlessly when developing without needing to spin up other services to help development.
- `models`: This contains all the Pydantic models that are used to share data between the `api` and `web`.

### Architecture Ideals
- `web` should only communicate with `api` for data. This allows us to entirely mock data for `web` when developing.
- Communication between `web` and `api` should only be done in a defined way using models described in `models`. `models` is the only shared code between `api` and `web`.
- Pages in `web/src/web/pages` should be independent of each other so there is minimal/no sharing between two sets of pages. Common code can be put in a separate module or package in `web`.


## Development

### Install Requirements

- Install (https://github.com/pyenv/pyenv)[pyenv]
- Install (https://github.com/pyenv/pyenv-virtualenv)[pyenv-virtualenv]

### Create Required Virtual Environments

```sh
pyenv virtualenv 3.11.0 hyui-web
pyenv virtualenv 3.11.0 hyui-api
```

### Activate Virtual Environment

In one shell:

```sh
pyenv activate hyui-web
```

In another shell:
```sh
pyenv activate hyui-api
```

These will be the Python virtual environments that contains all the dependencies for the Dash web app and the API backend.

### Install The Website App Requirements

In the `hyui-web` terminal in the root directory:

```sh
pip install -e "utils[test]"
pip install -e "models[test]"
pip install -e "web[test]"
```

### Install The API Requirements
In the `hyui-api` terminal in the root directory:

```sh
pip install -e "utils[test]"
pip install -e "models[test]"
pip install -e "api[test]"
```

### Install The pre-commit Hooks

In your shell (`hyui-api` or `hyui-web`) run the following command:

```sh
pre-commit install
```

### Configuring Environment Variables

An example environment variable file can be found at `.env.example`. The environment variables for each app are documented in the Pydantic Settings classes in `web/src/web/config.py` and `api/src/api/config.py`. An important one for development and production is the `WEB_API_URL` variable. This should be set to the host and port of your `api` server so most likely something like `http://api:8000` for running in Docker or `http://localhost:[port]/mock` for development. Note that in development a `/mock` path has been added. This allows the Dash web app to use all the mock endpoints instead of the live endpoints.

### Running The Servers Manually When Developing

The web server when in the `hyui-web` shell:

```sh
env $(grep -v '^#' .env | xargs) python -m web.main
```

The API server when in the `hyui-api` shell:

```sh
env $(grep -v '^#' .env | xargs) uvicorn api.main:app --reload --port 8092
```

Ensure you replace `.env` with the correct path to your development `.env` file. The command `env $(grep -v '^#' .env | xargs)` loads the contents of the `.env` into the environment just for the current execution. The `grep -v '^#'` part excludes lines beginning with a `#` in the env file.

### Running in PyCharm

On MacOS you will likely need to add the environment variable `OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES` to the `web` debugging process to stop a crash. This is due to a bug in the way the Dash background callback system works.

## Deployment

First create a `.env` file and ensure it is correct. Decide on a `prefix` that does not clash with others if you are running multiple instances on the same machine. If the prefixes clash then you will be building and running other peoples containers.

### Build the Docker Compose services.

In the `code` directory:

```sh
docker compose -p [prefix] build
```

### Run the Docker Compose services

In the `code` directory:

```sh
docker compose -p [prefix] up
```

### Stop And Remove Docker Containers

```sh
docker compose -p [prefix] down
```
